import { jsHost } from "./jsHost";

let callbacks = new Array();
window.callback = function callback(messageId, error, result){
    for(var key in callbacks){ 
       if (key == messageId ){
        console.log("Callback->",messageId, error ? error : result)
         error ? callbacks[key].reject(new Error(error)) : callbacks[key].resolve(result)
         delete callbacks[key]
         break
       }
    }
};

export class BridgeMessage{
    constructor(handlerName){
        this.handlerName = handlerName;
    }
    sendMessage(method,params) {
        return new Promise((resolve, reject) => {
           let messageId = method + "_" + Date.now();
           console.log("Request->",messageId, params ? params : {})
           var input ={
               Method :method,
               Params :params,
               MessageId: messageId
           };
           callbacks[messageId] = {reject,resolve}
           if (jsHost.ios){
               window.webkit.messageHandlers[this.handlerName].postMessage(JSON.stringify(input))
           }else if(jsHost.android){
               window[this.handlerName].postMessage(JSON.stringify(input));
           }else{
               window.callback(messageId,"Invalid host")
           }
       })
    }
}