"use strict";
exports.__esModule = true;
exports.BridgeMessage = void 0;
var jsHost_1 = require("./jsHost");
var callbacks = new Array();
window.callback = function callback(messageId, error, result) {
    for (var key in callbacks) {
        if (key == messageId) {
            error ? callbacks[key].reject(new Error(error)) : callbacks[key].resolve(result);
            delete callbacks[key];
            break;
        }
    }
};
var BridgeMessage = /** @class */ (function () {
    function BridgeMessage(handlerName) {
        this.handlerName = handlerName;
    }
    BridgeMessage.prototype.sendMessage = function (method, params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var messageId = method + "_" + Date.now();
            var input = {
                Method: method,
                Params: params,
                MessageId: messageId
            };
            callbacks[messageId] = { reject: reject, resolve: resolve };
            if (jsHost_1.jsHost.ios) {
                window.webkit.messageHandlers[_this.handlerName].postMessage(JSON.stringify(input));
            }
            else if (jsHost_1.jsHost.android) {
                window[_this.handlerName].postMessage(JSON.stringify(input));
            }
            else {
                window.callback(messageId, "Invalid host");
            }
        });
    };
    return BridgeMessage;
}());
exports.BridgeMessage = BridgeMessage;
